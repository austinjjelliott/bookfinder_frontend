{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"http://your-api-base-url.com\"; // Replace with your API's base URL\n\n// Create an Axios instance with default configurations\nconst apiClient = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Function to set the authorization token in the Axios instance\nconst setAuthToken = token => {\n  if (token) {\n    apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  } else {\n    delete apiClient.defaults.headers.common[\"Authorization\"];\n  }\n};\n\n// User authentication methods\nconst BooklyAPI = {\n  // User login\n  login: async credentials => {\n    const response = await apiClient.post(\"/auth/login\", credentials);\n    return response.data.token;\n  },\n  // User registration\n  register: async userData => {\n    const response = await apiClient.post(\"/auth/register\", userData);\n    return response.data.token;\n  },\n  // Fetch user profile\n  getUser: async username => {\n    const response = await apiClient.get(`/users/${username}`);\n    return response.data;\n  },\n  // Update user profile\n  updateUser: async (username, userData) => {\n    const response = await apiClient.patch(`/users/${username}`, userData);\n    return response.data;\n  },\n  // Book search\n  searchBooks: async queryParams => {\n    const response = await apiClient.get(\"/books/search\", {\n      params: queryParams\n    });\n    return response.data.books;\n  },\n  // Add book to favorites\n  addFavorite: async bookData => {\n    const response = await apiClient.post(\"/books/favorite\", bookData);\n    return response.data.favorite;\n  },\n  // Get user's favorite books\n  getFavorites: async () => {\n    const response = await apiClient.get(\"/books/favorites\");\n    return response.data.favorites;\n  },\n  // Remove book from favorites\n  removeFavorite: async bookId => {\n    const response = await apiClient.delete(`/books/favorite/${bookId}`);\n    return response.data.deleted;\n  }\n};\nexport { BooklyAPI, setAuthToken };","map":{"version":3,"names":["axios","BASE_URL","apiClient","create","baseURL","headers","setAuthToken","token","defaults","common","BooklyAPI","login","credentials","response","post","data","register","userData","getUser","username","get","updateUser","patch","searchBooks","queryParams","params","books","addFavorite","bookData","favorite","getFavorites","favorites","removeFavorite","bookId","delete","deleted"],"sources":["/Users/austinelliott/Springboard/Unit-50.Capstone2/capstone-project-two-e14219de7db4449bbc1f6df850e16946/bookfinder/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = \"http://your-api-base-url.com\"; // Replace with your API's base URL\n\n// Create an Axios instance with default configurations\nconst apiClient = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Function to set the authorization token in the Axios instance\nconst setAuthToken = (token) => {\n  if (token) {\n    apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  } else {\n    delete apiClient.defaults.headers.common[\"Authorization\"];\n  }\n};\n\n// User authentication methods\nconst BooklyAPI = {\n  // User login\n  login: async (credentials) => {\n    const response = await apiClient.post(\"/auth/login\", credentials);\n    return response.data.token;\n  },\n\n  // User registration\n  register: async (userData) => {\n    const response = await apiClient.post(\"/auth/register\", userData);\n    return response.data.token;\n  },\n\n  // Fetch user profile\n  getUser: async (username) => {\n    const response = await apiClient.get(`/users/${username}`);\n    return response.data;\n  },\n\n  // Update user profile\n  updateUser: async (username, userData) => {\n    const response = await apiClient.patch(`/users/${username}`, userData);\n    return response.data;\n  },\n\n  // Book search\n  searchBooks: async (queryParams) => {\n    const response = await apiClient.get(\"/books/search\", {\n      params: queryParams,\n    });\n    return response.data.books;\n  },\n\n  // Add book to favorites\n  addFavorite: async (bookData) => {\n    const response = await apiClient.post(\"/books/favorite\", bookData);\n    return response.data.favorite;\n  },\n\n  // Get user's favorite books\n  getFavorites: async () => {\n    const response = await apiClient.get(\"/books/favorites\");\n    return response.data.favorites;\n  },\n\n  // Remove book from favorites\n  removeFavorite: async (bookId) => {\n    const response = await apiClient.delete(`/books/favorite/${bookId}`);\n    return response.data.deleted;\n  },\n};\n\nexport { BooklyAPI, setAuthToken };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,8BAA8B,CAAC,CAAC;;AAEjD;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC9B,IAAIA,KAAK,EAAE;IACTL,SAAS,CAACM,QAAQ,CAACH,OAAO,CAACI,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUF,KAAK,EAAE;EACxE,CAAC,MAAM;IACL,OAAOL,SAAS,CAACM,QAAQ,CAACH,OAAO,CAACI,MAAM,CAAC,eAAe,CAAC;EAC3D;AACF,CAAC;;AAED;AACA,MAAMC,SAAS,GAAG;EAChB;EACAC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,MAAMC,QAAQ,GAAG,MAAMX,SAAS,CAACY,IAAI,CAAC,aAAa,EAAEF,WAAW,CAAC;IACjE,OAAOC,QAAQ,CAACE,IAAI,CAACR,KAAK;EAC5B,CAAC;EAED;EACAS,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,MAAMJ,QAAQ,GAAG,MAAMX,SAAS,CAACY,IAAI,CAAC,gBAAgB,EAAEG,QAAQ,CAAC;IACjE,OAAOJ,QAAQ,CAACE,IAAI,CAACR,KAAK;EAC5B,CAAC;EAED;EACAW,OAAO,EAAE,MAAOC,QAAQ,IAAK;IAC3B,MAAMN,QAAQ,GAAG,MAAMX,SAAS,CAACkB,GAAG,CAAC,UAAUD,QAAQ,EAAE,CAAC;IAC1D,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAM,UAAU,EAAE,MAAAA,CAAOF,QAAQ,EAAEF,QAAQ,KAAK;IACxC,MAAMJ,QAAQ,GAAG,MAAMX,SAAS,CAACoB,KAAK,CAAC,UAAUH,QAAQ,EAAE,EAAEF,QAAQ,CAAC;IACtE,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAQ,WAAW,EAAE,MAAOC,WAAW,IAAK;IAClC,MAAMX,QAAQ,GAAG,MAAMX,SAAS,CAACkB,GAAG,CAAC,eAAe,EAAE;MACpDK,MAAM,EAAED;IACV,CAAC,CAAC;IACF,OAAOX,QAAQ,CAACE,IAAI,CAACW,KAAK;EAC5B,CAAC;EAED;EACAC,WAAW,EAAE,MAAOC,QAAQ,IAAK;IAC/B,MAAMf,QAAQ,GAAG,MAAMX,SAAS,CAACY,IAAI,CAAC,iBAAiB,EAAEc,QAAQ,CAAC;IAClE,OAAOf,QAAQ,CAACE,IAAI,CAACc,QAAQ;EAC/B,CAAC;EAED;EACAC,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,MAAMjB,QAAQ,GAAG,MAAMX,SAAS,CAACkB,GAAG,CAAC,kBAAkB,CAAC;IACxD,OAAOP,QAAQ,CAACE,IAAI,CAACgB,SAAS;EAChC,CAAC;EAED;EACAC,cAAc,EAAE,MAAOC,MAAM,IAAK;IAChC,MAAMpB,QAAQ,GAAG,MAAMX,SAAS,CAACgC,MAAM,CAAC,mBAAmBD,MAAM,EAAE,CAAC;IACpE,OAAOpB,QAAQ,CAACE,IAAI,CAACoB,OAAO;EAC9B;AACF,CAAC;AAED,SAASzB,SAAS,EAAEJ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}