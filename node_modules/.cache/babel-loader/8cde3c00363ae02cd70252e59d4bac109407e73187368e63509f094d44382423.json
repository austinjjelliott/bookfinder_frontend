{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"http://localhost:3001\"; // Your local backend API\nconst GOOGLE_BOOKS_API_URL = \"https://www.googleapis.com/books/v1/volumes\";\nconst GOOGLE_PLACES_API_URL = \"https://maps.googleapis.com/maps/api/place/textsearch/json\";\nconst API_KEY = process.env.REACT_APP_GOOGLE_API_KEY; // Store your key in .env\n\nclass BooklyAPI {\n  // Set the JWT token for authorization\n  static setToken(token) {\n    this.token = token;\n  }\n\n  // Generic request method\n  static async request(endpoint, data = {}, method = \"get\") {\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = this.token ? {\n      Authorization: `Bearer ${this.token}`\n    } : {};\n    const params = method === \"get\" ? data : {};\n    try {\n      const response = await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      });\n      return response.data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      throw err.response.data;\n    }\n  }\n\n  // User-related API calls to LOCAL backend\n  static async login(credentials) {\n    const res = await this.request(\"auth/token\", credentials, \"post\");\n    return res.token;\n  }\n  static async register(userData) {\n    const res = await this.request(\"auth/register\", userData, \"post\");\n    return res.token;\n  }\n  static async getUser(username) {\n    const res = await this.request(`users/${username}`);\n    // console.log(\"Full response:\", res); // DEBUGGING\n    return res;\n  }\n  static async updateUser(username, userData) {\n    const res = await this.request(`users/${username}`, userData, \"patch\");\n    console.log(\"API Response after profile update:\", res); // Log the response to verify\n    return res;\n  }\n\n  // Book-related API calls to LOCAL backend\n\n  static async addFavorite(bookData) {\n    const res = await this.request(\"books/favorite\", bookData, \"post\");\n    return res.favorite;\n  }\n  static async getFavorites() {\n    const res = await this.request(\"books/favorites\");\n    return res.favorites;\n  }\n  static async removeFavorite(bookId) {\n    const res = await this.request(`books/favorite/${bookId}`, {}, \"delete\");\n    return res.deleted;\n  }\n  static async updateFavorites(username, favorites) {\n    const response = await fetch(`http://localhost:3001/users/${username}/favorites`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}` // Assuming JWT token\n      },\n      body: JSON.stringify({\n        favorites\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Error updating favorites\");\n    }\n    const data = await response.json();\n    return data.favorites; // Return the updated favorites list\n  }\n\n  // Google Books API call\n  static async searchBooks(query) {\n    try {\n      const response = await axios.get(GOOGLE_BOOKS_API_URL, {\n        params: {\n          q: query,\n          maxResults: 25\n        }\n      });\n      return response.data.items.map(book => {\n        var _book$volumeInfo$imag;\n        return {\n          id: book.id,\n          title: book.volumeInfo.title,\n          authors: book.volumeInfo.authors || [],\n          description: book.volumeInfo.description || \"No description available\",\n          thumbnail: ((_book$volumeInfo$imag = book.volumeInfo.imageLinks) === null || _book$volumeInfo$imag === void 0 ? void 0 : _book$volumeInfo$imag.thumbnail) || null,\n          pageCount: book.volumeInfo.pageCount,\n          publishedDate: book.volumeInfo.publishedDate\n        };\n      });\n    } catch (err) {\n      console.error(\"Books API Error:\", err.response);\n      throw err.response.data;\n    }\n  }\n  static async getSingleBook(id) {\n    try {\n      const response = await axios.get(`${GOOGLE_BOOKS_API_URL}/${id}`);\n      return response.data;\n    } catch (err) {\n      console.error(\"Book detail API Error:\", err.response);\n      throw err.response.data;\n    }\n  }\n\n  //GOOGLE PLACES API CALL:\n  static async searchPlaces(query) {\n    try {\n      const response = await axios.get(GOOGLE_PLACES_API_URL, {\n        params\n      });\n    } catch (err) {\n      console.error(\"Google Places API Error:\", err.response);\n      throw err.response.data;\n    }\n  }\n}\nexport default BooklyAPI;","map":{"version":3,"names":["axios","BASE_URL","GOOGLE_BOOKS_API_URL","GOOGLE_PLACES_API_URL","API_KEY","process","env","REACT_APP_GOOGLE_API_KEY","BooklyAPI","setToken","token","request","endpoint","data","method","url","headers","Authorization","params","response","err","console","error","login","credentials","res","register","userData","getUser","username","updateUser","log","addFavorite","bookData","favorite","getFavorites","favorites","removeFavorite","bookId","deleted","updateFavorites","fetch","localStorage","getItem","body","JSON","stringify","ok","Error","json","searchBooks","query","get","q","maxResults","items","map","book","_book$volumeInfo$imag","id","title","volumeInfo","authors","description","thumbnail","imageLinks","pageCount","publishedDate","getSingleBook","searchPlaces"],"sources":["/Users/austinelliott/Springboard/Unit-50.Capstone2/capstone-project-two-e14219de7db4449bbc1f6df850e16946/bookfinder/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = \"http://localhost:3001\"; // Your local backend API\nconst GOOGLE_BOOKS_API_URL = \"https://www.googleapis.com/books/v1/volumes\";\nconst GOOGLE_PLACES_API_URL =\n  \"https://maps.googleapis.com/maps/api/place/textsearch/json\";\nconst API_KEY = process.env.REACT_APP_GOOGLE_API_KEY; // Store your key in .env\n\nclass BooklyAPI {\n  static token;\n\n  // Set the JWT token for authorization\n  static setToken(token) {\n    this.token = token;\n  }\n\n  // Generic request method\n  static async request(endpoint, data = {}, method = \"get\") {\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = this.token ? { Authorization: `Bearer ${this.token}` } : {};\n    const params = method === \"get\" ? data : {};\n\n    try {\n      const response = await axios({ url, method, data, params, headers });\n      return response.data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      throw err.response.data;\n    }\n  }\n\n  // User-related API calls to LOCAL backend\n  static async login(credentials) {\n    const res = await this.request(\"auth/token\", credentials, \"post\");\n    return res.token;\n  }\n\n  static async register(userData) {\n    const res = await this.request(\"auth/register\", userData, \"post\");\n    return res.token;\n  }\n\n  static async getUser(username) {\n    const res = await this.request(`users/${username}`);\n    // console.log(\"Full response:\", res); // DEBUGGING\n    return res;\n  }\n\n  static async updateUser(username, userData) {\n    const res = await this.request(`users/${username}`, userData, \"patch\");\n    console.log(\"API Response after profile update:\", res); // Log the response to verify\n    return res;\n  }\n\n  // Book-related API calls to LOCAL backend\n\n  static async addFavorite(bookData) {\n    const res = await this.request(\"books/favorite\", bookData, \"post\");\n    return res.favorite;\n  }\n\n  static async getFavorites() {\n    const res = await this.request(\"books/favorites\");\n    return res.favorites;\n  }\n\n  static async removeFavorite(bookId) {\n    const res = await this.request(`books/favorite/${bookId}`, {}, \"delete\");\n    return res.deleted;\n  }\n\n  static async updateFavorites(username, favorites) {\n    const response = await fetch(\n      `http://localhost:3001/users/${username}/favorites`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Assuming JWT token\n        },\n        body: JSON.stringify({ favorites }),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(\"Error updating favorites\");\n    }\n\n    const data = await response.json();\n    return data.favorites; // Return the updated favorites list\n  }\n\n  // Google Books API call\n  static async searchBooks(query) {\n    try {\n      const response = await axios.get(GOOGLE_BOOKS_API_URL, {\n        params: { q: query, maxResults: 25 },\n      });\n      return response.data.items.map((book) => ({\n        id: book.id,\n        title: book.volumeInfo.title,\n        authors: book.volumeInfo.authors || [],\n        description: book.volumeInfo.description || \"No description available\",\n        thumbnail: book.volumeInfo.imageLinks?.thumbnail || null,\n        pageCount: book.volumeInfo.pageCount,\n        publishedDate: book.volumeInfo.publishedDate,\n      }));\n    } catch (err) {\n      console.error(\"Books API Error:\", err.response);\n      throw err.response.data;\n    }\n  }\n\n  static async getSingleBook(id) {\n    try {\n      const response = await axios.get(`${GOOGLE_BOOKS_API_URL}/${id}`);\n      return response.data;\n    } catch (err) {\n      console.error(\"Book detail API Error:\", err.response);\n      throw err.response.data;\n    }\n  }\n\n  //GOOGLE PLACES API CALL:\n  static async searchPlaces(query) {\n    try {\n      const response = await axios.get(GOOGLE_PLACES_API_URL, {\n        params,\n      });\n    } catch (err) {\n      console.error(\"Google Places API Error:\", err.response);\n      throw err.response.data;\n    }\n  }\n}\n\nexport default BooklyAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}