{"ast":null,"code":"var _jsxFileName = \"/Users/austinelliott/Springboard/Unit-50.Capstone2/capstone-project-two-e14219de7db4449bbc1f6df850e16946/bookfinder/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport \"./App.css\";\nimport NavBar from \"./NavBar\";\nimport BooklyRoutes from \"./Routes\";\nimport BooklyAPI from \"./api\";\nimport UserContext from \"./UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem(\"token\") || null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function fetchUser() {\n      const storedToken = localStorage.getItem(\"token\");\n      // console.log(\"Retrieved token:\", storedToken); //DEUBGGING\n\n      if (storedToken) {\n        try {\n          BooklyAPI.token = storedToken;\n          const decoded = jwtDecode(storedToken);\n          // console.log(\"Decoded token:\", decoded); //DEBUGGING 2\n          const {\n            username\n          } = decoded;\n          const user = await BooklyAPI.getUser(username);\n          // console.log(\"Fetched user:\", user); //DEBUGGIN 3\n          setCurrentUser(user);\n          // console.log(\"Current user set in App state:\", user); // DEBUGGING 4: Log the current user\n        } catch (err) {\n          console.error(\"Error Loading User\", err);\n          setCurrentUser(null);\n        }\n      } else {\n        setCurrentUser(null);\n      }\n      setIsLoading(false);\n    }\n    fetchUser();\n  }, [token]); //Change it everytime the token changes (ie new user)\n\n  async function login(credentials) {\n    try {\n      const token = await BooklyAPI.login(credentials);\n      setToken(token);\n    } catch (err) {\n      console.error(\"ERROR LOGGING IN\", err);\n      throw err;\n    }\n  }\n  async function signup(userData) {\n    try {\n      const token = await BooklyAPI.register(userData);\n      setToken(token);\n    } catch (err) {\n      console.error(\"ERROR SIGNING UP\", err);\n      throw err;\n    }\n  }\n\n  // async function updateUser(username, userData) {\n  //   try {\n  //     // Make sure the username is passed in the URL path when making the PATCH request\n  //     const res = await BooklyAPI.updateUser(username, userData); // Pass username from context\n  //     setCurrentUser(res); // Update the context with the new user data\n  //   } catch (err) {\n  //     console.error(\"Error updating profile\", err);\n  //     throw err;\n  //   }\n  // }\n  //UPDATE USER ATTEMPT 2\n  async function updateUser(username, updatedUser) {\n    try {\n      const response = await fetch(`http://localhost:3001/users/${username}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}` // Make sure the token is included if required\n        },\n        body: JSON.stringify(updatedUser)\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update user\");\n      }\n      return await response.json(); // Return the updated user\n    } catch (err) {\n      console.error(\"Error updating user:\", err);\n      throw err;\n    }\n  }\n  async function logout() {\n    setToken(null);\n    setCurrentUser(null);\n    localStorage.removeItem(\"token\");\n    BooklyAPI.token = null;\n  }\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      currentUser,\n      setCurrentUser,\n      token,\n      setToken\n    },\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        logout: logout,\n        token: token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BooklyRoutes, {\n        login: login,\n        signup: signup,\n        updateUser: updateUser,\n        token: token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"35WB8Uipu0I1BFz31GsfkmWY6hg=\");\n_c = App;\nexport default App;\n\n//if i fuk up go back to this:\n/*\n  useEffect(() => {\n    async function fetchUser() {\n      if (token) {\n        try {\n          localStorage.setItem(\"token\", token);\n          BooklyAPI.token = token;\n          console.log(\"Token set in App state:\", token); // DEBUGGING: Log the token\n          const { username } = jwtDecode(token);\n          const user = await BooklyAPI.getUser(username);\n          setCurrentUser(user);\n          console.log(\"Current user set in App state:\", user); // DEBUGGING: Log the current user\n        } catch (err) {\n          console.error(\"Error Loading User\", err);\n          setCurrentUser(null);\n        }\n      } else {\n        setCurrentUser(null);\n      }\n      setIsLoading(false);\n    }\n    fetchUser();\n  }, [token]); //Change it everytime the token changes (ie new user)\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","jwtDecode","NavBar","BooklyRoutes","BooklyAPI","UserContext","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","token","setToken","localStorage","getItem","isLoading","setIsLoading","fetchUser","storedToken","decoded","username","user","getUser","err","console","error","login","credentials","signup","userData","register","updateUser","updatedUser","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","json","logout","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","$RefreshReg$"],"sources":["/Users/austinelliott/Springboard/Unit-50.Capstone2/capstone-project-two-e14219de7db4449bbc1f6df850e16946/bookfinder/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport \"./App.css\";\nimport NavBar from \"./NavBar\";\nimport BooklyRoutes from \"./Routes\";\nimport BooklyAPI from \"./api\";\nimport UserContext from \"./UserContext\";\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem(\"token\") || null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchUser() {\n      const storedToken = localStorage.getItem(\"token\");\n      // console.log(\"Retrieved token:\", storedToken); //DEUBGGING\n\n      if (storedToken) {\n        try {\n          BooklyAPI.token = storedToken;\n          const decoded = jwtDecode(storedToken);\n          // console.log(\"Decoded token:\", decoded); //DEBUGGING 2\n          const { username } = decoded;\n          const user = await BooklyAPI.getUser(username);\n          // console.log(\"Fetched user:\", user); //DEBUGGIN 3\n          setCurrentUser(user);\n          // console.log(\"Current user set in App state:\", user); // DEBUGGING 4: Log the current user\n        } catch (err) {\n          console.error(\"Error Loading User\", err);\n          setCurrentUser(null);\n        }\n      } else {\n        setCurrentUser(null);\n      }\n      setIsLoading(false);\n    }\n    fetchUser();\n  }, [token]); //Change it everytime the token changes (ie new user)\n\n  async function login(credentials) {\n    try {\n      const token = await BooklyAPI.login(credentials);\n      setToken(token);\n    } catch (err) {\n      console.error(\"ERROR LOGGING IN\", err);\n      throw err;\n    }\n  }\n  async function signup(userData) {\n    try {\n      const token = await BooklyAPI.register(userData);\n      setToken(token);\n    } catch (err) {\n      console.error(\"ERROR SIGNING UP\", err);\n      throw err;\n    }\n  }\n\n  // async function updateUser(username, userData) {\n  //   try {\n  //     // Make sure the username is passed in the URL path when making the PATCH request\n  //     const res = await BooklyAPI.updateUser(username, userData); // Pass username from context\n  //     setCurrentUser(res); // Update the context with the new user data\n  //   } catch (err) {\n  //     console.error(\"Error updating profile\", err);\n  //     throw err;\n  //   }\n  // }\n  //UPDATE USER ATTEMPT 2\n  async function updateUser(username, updatedUser) {\n    try {\n      const response = await fetch(`http://localhost:3001/users/${username}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`, // Make sure the token is included if required\n        },\n        body: JSON.stringify(updatedUser),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update user\");\n      }\n\n      return await response.json(); // Return the updated user\n    } catch (err) {\n      console.error(\"Error updating user:\", err);\n      throw err;\n    }\n  }\n\n  async function logout() {\n    setToken(null);\n    setCurrentUser(null);\n    localStorage.removeItem(\"token\");\n    BooklyAPI.token = null;\n  }\n\n  if (isLoading) return <p>Loading...</p>;\n\n  return (\n    <UserContext.Provider\n      value={{ currentUser, setCurrentUser, token, setToken }}\n    >\n      <BrowserRouter>\n        <NavBar logout={logout} token={token} />\n        <BooklyRoutes\n          login={login}\n          signup={signup}\n          updateUser={updateUser}\n          token={token}\n        />\n      </BrowserRouter>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n\n//if i fuk up go back to this:\n/*\n  useEffect(() => {\n    async function fetchUser() {\n      if (token) {\n        try {\n          localStorage.setItem(\"token\", token);\n          BooklyAPI.token = token;\n          console.log(\"Token set in App state:\", token); // DEBUGGING: Log the token\n          const { username } = jwtDecode(token);\n          const user = await BooklyAPI.getUser(username);\n          setCurrentUser(user);\n          console.log(\"Current user set in App state:\", user); // DEBUGGING: Log the current user\n        } catch (err) {\n          console.error(\"Error Loading User\", err);\n          setCurrentUser(null);\n        }\n      } else {\n        setCurrentUser(null);\n      }\n      setIsLoading(false);\n    }\n    fetchUser();\n  }, [token]); //Change it everytime the token changes (ie new user)\n*/\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}